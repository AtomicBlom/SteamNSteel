import org.gradle.plugins.ide.idea.model.*

// define the properties file
ext.configFile = file "build.properties"
configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'idea'

// for people who want unstable ForgeGradle
apply plugin: 'net.minecraftforge.gradle.forge'
// for people who want stable ForgeGradle
/*plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.1"
}*/

///////////////////////////////////////////////////
// IDE Settings
///////////////////////////////////////////////////
idea {
    project {
        languageLevel = '1.7'
    }
}

///////////////////////////////////////////////////
// ForgeGradle
///////////////////////////////////////////////////
version = config.mod_version
group = config.group_name
archivesBaseName = "[${config.minecraft_version}]${config.mod_id}"
sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

/*def commonManifest = {
    attributes 'FMLAT': 'steamnsteel_at.cfg'
}*/

minecraft {
    version = config.minecraft_version + "-" + config.forge_version // grab latest forge
    runDir = "run"

    mappings = config.mcp_mappings
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    replace '@MOD_VERSION@', version
    replace '@API_VERSION@', config.api_version
}

///////////////////////////////////////////////////
// SHADING
///////////////////////////////////////////////////
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    def deobfPrefix = "deobf." + minecraft.mappingsChannel + '.' + minecraft.mappingsVersion + '.'
    dependencies {
        include(dependency(deobfPrefix + 'mod.steamnsteel:mcgui:1.0'))
    }
    relocate 'mod.steamnsteel.mcgui', 'mod.steamnsteel.shaded.mod.steamnsteel.mcgui'
    classifier = 'universal'
}

reobf.jar.task.dependsOn shadowJar

///////////////////////////////////////////////////
// Resources
///////////////////////////////////////////////////
processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        // replace version and mcversion
        expand ([
            'version':project.version,
            'mcversion':project.minecraft.version,
            'forge_version': config.forge_version,
            'mod_version': config.mod_version,
            'minecraft_version': config.minecraft_version
           ])
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    classifier = 'universal'
}

// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
    from sourceSets.main.output
    appendix = 'deobf'
}

///////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////
dependencies {
    repositories {
        maven {
            url 'http://repository.steamnsteel.info/artifactory/steamnsteel-libs-unstable'
        }
    }
    deobfCompile(group: 'mod.steamnsteel', name: 'mcgui', version: '1.0', classifier: 'API')
}

///////////////////////////////////////////////////
// CodeChicken
///////////////////////////////////////////////////
if (config.include_codechicken == "true") {
    repositories {
        maven {
            name = "ChickenBones"
            url = "http://chickenbones.net/maven/"
        }
    }

    dependencies {
        provided "codechicken:CodeChickenCore:${config.codechicken_core_version}:dev"
        provided "codechicken:NotEnoughItems:${config.codechicken_nei_version}:dev"
    }

    task copyChicken(type: Copy, dependsOn: "extractUserdev") {

        from { configurations.compile }
        include "**/*Chicken*.jar", "**/*NotEnoughItems*.jar"
        exclude "**/CodeChickenLib*" // because CCC downloads it anyways.. -_-
        into file("./run/mods") // parallel to the assets dir

        onlyIf {
            return config.include_codechicken == "true"
        }
    }

    tasks.setupDevWorkspace.dependsOn copyChicken
    tasks.setupDecompWorkspace.dependsOn copyChicken
} else {
    sourceSets.main.java.exclude "mod/steamnsteel/nei/*.java"
    idea.module.excludeDirs += file("src/main/java/mod/steamnsteel/nei/")
}